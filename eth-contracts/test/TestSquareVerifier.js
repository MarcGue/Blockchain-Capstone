// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
const squareVerifier = artifacts.require('SquareVerifier');

const proof = require('../../zokrates/code/square/proof.json');

contract('TestSquareVerifier', (accounts) => {
  describe('Verification', () => {
    beforeEach(async () => {
      this.contract = await squareVerifier.new({ from: accounts[0] });
    });

    // Test verification with correct proof
    // - use the contents from proof.json generated from zokrates steps
    it('should verifiy with correct proof', async () => {
      const verified = await this.contract.verifyTx(proof.proof.a, proof.proof.b, proof.proof.c, proof.inputs, {
        from: accounts[0],
      });
      assert.equal(verified, true, 'verification failed');
    });

    // Test verification with incorrect proof
    it('should not with verify incorrect proof', async () => {
      const verified = await this.contract.verifyTx(proof.proof.a, proof.proof.b, proof.proof.c, [10, 1], {
        from: accounts[0],
      });
      assert.equal(verified, false, 'verification successful');
    });
  });
});
